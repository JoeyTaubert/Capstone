{"message":"unused imports: `Capture`, `Device`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":11,"byte_end":17,"line_start":1,"line_end":1,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"use pcap::{Device, Capture};","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":19,"byte_end":26,"line_start":1,"line_end":1,"column_start":20,"column_end":27,"is_primary":true,"text":[{"text":"use pcap::{Device, Capture};","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":28,"line_start":1,"line_end":1,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"use pcap::{Device, Capture};","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Capture`, `Device`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse pcap::{Device, Capture};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `EtherTypes`, `EthernetPacket`, `Packet`, `ipv4::Ipv4Packet`, `tcp::TcpPacket`, `udp::UdpPacket`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":48,"byte_end":64,"line_start":2,"line_end":2,"column_start":20,"column_end":36,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":20,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":66,"byte_end":80,"line_start":2,"line_end":2,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":38,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":82,"byte_end":96,"line_start":2,"line_end":2,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":98,"byte_end":104,"line_start":2,"line_end":2,"column_start":70,"column_end":76,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":70,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":117,"byte_end":131,"line_start":2,"line_end":2,"column_start":89,"column_end":103,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":89,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":133,"byte_end":143,"line_start":2,"line_end":2,"column_start":105,"column_end":115,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":105,"highlight_end":115}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":29,"byte_end":146,"line_start":2,"line_end":2,"column_start":1,"column_end":118,"is_primary":true,"text":[{"text":"use pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};","highlight_start":1,"highlight_end":118}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `EtherTypes`, `EthernetPacket`, `Packet`, `ipv4::Ipv4Packet`, `tcp::TcpPacket`, `udp::UdpPacket`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:2:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse pnet::packet::{ipv4::Ipv4Packet, tcp::TcpPacket, udp::UdpPacket, Packet, ethernet::{EthernetPacket, EtherTypes}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `NetworkInterface`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":174,"byte_end":190,"line_start":3,"line_end":3,"column_start":28,"column_end":44,"is_primary":true,"text":[{"text":"use pnet::datalink::{self, NetworkInterface};","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":172,"byte_end":190,"line_start":3,"line_end":3,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"use pnet::datalink::{self, NetworkInterface};","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `NetworkInterface`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse pnet::datalink::{self, NetworkInterface};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `HashMap`, `Ipv4Addr`, `Ipv6Addr`, `env`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":207,"byte_end":210,"line_start":4,"line_end":4,"column_start":15,"column_end":18,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":15,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":226,"byte_end":233,"line_start":4,"line_end":4,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":250,"byte_end":258,"line_start":4,"line_end":4,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":260,"byte_end":268,"line_start":4,"line_end":4,"column_start":68,"column_end":76,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":68,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":205,"byte_end":234,"line_start":4,"line_end":4,"column_start":13,"column_end":42,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":13,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":248,"byte_end":268,"line_start":4,"line_end":4,"column_start":56,"column_end":76,"is_primary":true,"text":[{"text":"use std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};","highlight_start":56,"highlight_end":76}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `HashMap`, `Ipv4Addr`, `Ipv6Addr`, `env`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{io, env, collections::{HashMap}, net::{IpAddr, Ipv4Addr, Ipv6Addr}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2905,"byte_end":2915,"line_start":111,"line_end":111,"column_start":41,"column_end":51,"is_primary":true,"text":[{"text":"    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");","highlight_start":41,"highlight_end":51}],"label":"expected `&NetworkInterface`, found `&String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2887,"byte_end":2904,"line_start":111,"line_end":111,"column_start":23,"column_end":40,"is_primary":false,"text":[{"text":"    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");","highlight_start":23,"highlight_end":40}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&NetworkInterface`\n   found reference `&String`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/home/joey/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pnet_datalink-0.34.0/src/lib.rs","byte_start":4793,"byte_end":4800,"line_start":186,"line_end":186,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"pub fn channel(network_interface: &NetworkInterface, configuration: Config) -> io::Result<Channel> {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:111:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&NetworkInterface`, found `&String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&NetworkInterface\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/joey/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pnet_datalink-0.34.0/src/lib.rs:186:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn channel(network_interface: &NetworkInterface, configuration: Config) -> io::Result<Channel> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2873,"byte_end":2884,"line_start":111,"line_end":111,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");","highlight_start":9,"highlight_end":20}],"label":"expected `Channel`, found `(_, _)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2887,"byte_end":2978,"line_start":111,"line_end":111,"column_start":23,"column_end":114,"is_primary":false,"text":[{"text":"    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");","highlight_start":23,"highlight_end":114}],"label":"this expression has type `Channel`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Channel`\n  found tuple `(_, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:111:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (_, mut rx) = datalink::channel(&interface, Default::default()).expect(\"Error creating datalink channel\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `Channel`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Channel`, found `(_, _)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1mChannel\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found tuple `\u001b[0m\u001b[0m\u001b[1m(_, _)\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
